{"ast":null,"code":"import _classCallCheck from\"/workspace/Robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/workspace/Robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/workspace/Robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/workspace/Robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{connect}from'react-redux';import{setSearchField,requestRobots}from'../actions';import CardList from'../components/CardList';import SearchBox from'../components/SearchBox';import Scroll from'../components/Scroll';import ErrorBoundry from'../components/ErrorBoundry';import'./App.css';// parameter state comes from index.js provider store state(rootReducers)\nvar mapStateToProps=function mapStateToProps(state){return{searchField:state.searchRobots.searchField,robots:state.requestRobots.robots,isPending:state.requestRobots.isPending};};// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nvar mapDispatchToProps=function mapDispatchToProps(dispatch){return{onSearchChange:function onSearchChange(event){return dispatch(setSearchField(event.target.value));},onRequestRobots:function onRequestRobots(){return dispatch(requestRobots());}};};var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){_classCallCheck(this,App);return _super.apply(this,arguments);}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){this.props.onRequestRobots();}},{key:\"render\",value:function render(){var _this$props=this.props,robots=_this$props.robots,searchField=_this$props.searchField,onSearchChange=_this$props.onSearchChange,isPending=_this$props.isPending;var filteredRobots=robots.filter(function(robot){return robot.name.toLowerCase().includes(searchField.toLowerCase());});return/*#__PURE__*/React.createElement(\"div\",{className:\"tc\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"f1\"},\"RoboFriends\"),/*#__PURE__*/React.createElement(SearchBox,{searchChange:onSearchChange}),/*#__PURE__*/React.createElement(Scroll,null,isPending?/*#__PURE__*/React.createElement(\"h1\",null,\"Loading\"):/*#__PURE__*/React.createElement(ErrorBoundry,null,/*#__PURE__*/React.createElement(CardList,{robots:filteredRobots}))));}}]);return App;}(Component);// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","map":{"version":3,"sources":["/workspace/Robofriends/src/containers/App.js"],"names":["React","Component","connect","setSearchField","requestRobots","CardList","SearchBox","Scroll","ErrorBoundry","mapStateToProps","state","searchField","searchRobots","robots","isPending","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","props","filteredRobots","filter","robot","name","toLowerCase","includes"],"mappings":"oiBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,cAAT,CAAyBC,aAAzB,KAA8C,YAA9C,CAEA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CAEA,MAAO,WAAP,CAEA;AACA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CACjC,MAAO,CACLC,WAAW,CAAED,KAAK,CAACE,YAAN,CAAmBD,WAD3B,CAELE,MAAM,CAAEH,KAAK,CAACN,aAAN,CAAoBS,MAFvB,CAGLC,SAAS,CAAEJ,KAAK,CAACN,aAAN,CAAoBU,SAH1B,CAAP,CAKD,CAND,CAQA;AACA;AACA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAc,CACvC,MAAO,CACLC,cAAc,CAAE,wBAACC,KAAD,QAAWF,CAAAA,QAAQ,CAACb,cAAc,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAAnB,EADX,CAELC,eAAe,CAAE,iCAAML,CAAAA,QAAQ,CAACZ,aAAa,EAAd,CAAd,EAFZ,CAAP,CAID,CALD,C,GAOMkB,CAAAA,G,qPACgB,CAClB,KAAKC,KAAL,CAAWF,eAAX,GACD,C,uCAEQ,iBACoD,KAAKE,KADzD,CACCV,MADD,aACCA,MADD,CACSF,WADT,aACSA,WADT,CACsBM,cADtB,aACsBA,cADtB,CACsCH,SADtC,aACsCA,SADtC,CAEP,GAAMU,CAAAA,cAAc,CAAGX,MAAM,CAACY,MAAP,CAAc,SAAAC,KAAK,CAAI,CAC5C,MAAOA,CAAAA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkClB,WAAW,CAACiB,WAAZ,EAAlC,CAAP,CACD,CAFsB,CAAvB,CAGA,mBACE,2BAAK,SAAS,CAAC,IAAf,eACE,0BAAI,SAAS,CAAC,IAAd,gBADF,cAEE,oBAAC,SAAD,EAAW,YAAY,CAAEX,cAAzB,EAFF,cAGE,oBAAC,MAAD,MACIH,SAAS,cAAG,wCAAH,cACT,oBAAC,YAAD,mBACE,oBAAC,QAAD,EAAU,MAAM,CAAEU,cAAlB,EADF,CAFJ,CAHF,CADF,CAaD,C,iBAvBevB,S,EA0BlB;AACA,cAAeC,CAAAA,OAAO,CAACO,eAAD,CAAkBM,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n"]},"metadata":{},"sourceType":"module"}